Exact singleton pattern -


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;

public class DBUtils {

    // static instance of singleton
    private static DBUtils instance;
    private Connection connection;

    // private constructor
    private DBUtils() throws SQLException {
        connection = DriverManager.getConnection(
            "jdbc:mysql://localhost:3306/testdb", "user", "password");
    }

    // static block to initialize singleton
    static {
        try {
            instance = new DBUtils();
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to create DBUtils singleton");
        }
    }

    // public method to get singleton instance
    public static DBUtils getInstance() {
        return instance;
    }

    // get connection
    public Connection getConnection() {
        return connection;
    }
}


Modified to suit current functionality - 

public class DBUtils {

    private static Connection connection;   

    static {
        try {
            connection = DriverManager.getConnection(
                "jdbc:mysql://localhost:3306/testdb", "user", "password");
        } catch (SQLException e) {
            e.printStackTrace();
            throw new RuntimeException("Failed to create DBUtils singleton");
        }
    }

    public static Connection getConnection() {
        return connection;
    }
}

Disadvantage 

Singleton  connection is OK for small apps 

But in industry grade app , it's disadvantages are - 
 
 - Only one query at a time can use the connection safely.

  - Connection may timeout or close, breaking all code using it.

Better approach: use a connection pool (HikariCP, C3P0, Apache DBCP) and let getConnection() fetch a pooled connection.